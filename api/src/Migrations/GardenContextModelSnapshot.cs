// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(GardenContext))]
    partial class GardenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Data.Entities.Auth.Captcha", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UpdateDate");

                    b.ToTable("Captchas");
                });

            modelBuilder.Entity("api.Data.Entities.Auth.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UpdateDate");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("api.Data.Entities.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ExpirationResetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ResetWord")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("StationId");

                    b.HasIndex("UpdateDate");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Data.Entities.Catalog.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DescriptionSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GerminationMinimalTemperature")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("GerminationMinimalTemperature");

                    b.Property<decimal?>("GerminationOptimaleTemperature")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("GerminationOptimaleTemperature");

                    b.Property<decimal?>("IdealGrowingTemperature")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("IdealGrowingTemperature");

                    b.Property<int?>("MaximumRisingTime")
                        .HasColumnType("int");

                    b.Property<int?>("MinimalRisingTime")
                        .HasColumnType("int");

                    b.Property<int?>("SunshineDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ZeroVegetation")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ZeroVegetation");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UpdateDate");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("api.Data.Entities.Catalog.Search", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SearchCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UpdateDate");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("api.Data.Entities.Catalog.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxMaturationDaysCount")
                        .HasColumnType("int");

                    b.Property<int>("MinMaturationDaysCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("FamilyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UpdateDate");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("api.Data.Entities.ClimateDatas.Climate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Climates");
                });

            modelBuilder.Entity("api.Data.Entities.ClimateDatas.PhysicalMeasurements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AverageTemperature")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AverageTemperature");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxTemperature")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MaxTemperature");

                    b.Property<decimal>("MinTemperature")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MinTemperature");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Month");

                    b.HasIndex("StationId");

                    b.HasIndex("UpdateDate");

                    b.ToTable("PhysicalMeasurements");
                });

            modelBuilder.Entity("api.Data.Entities.ClimateDatas.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Altitude")
                        .HasColumnType("int");

                    b.Property<int>("ClimateId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InseeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDepartment")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tendency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClimateId");

                    b.HasIndex("Code");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsDepartment");

                    b.HasIndex("UpdateDate");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("api.Data.Entities.Messaging.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UpdateDate");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("api.Data.Entities.Repositories.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("api.Data.Entities.Repositories.Stage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("api.Data.Entities.StocksManaging.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RemainingQuantity");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("ExpirationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("RemainingQuantity");

                    b.HasIndex("StockId");

                    b.HasIndex("UpdateDate");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("api.Data.Entities.StocksManaging.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UpdateDate");

                    b.HasIndex("UserId");

                    b.HasIndex("VariantId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("api.Data.Entities.Workflow.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("FlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Date");

                    b.HasIndex("FlowId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StageId");

                    b.HasIndex("UpdateDate");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("api.Data.Entities.Workflow.Flow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDaysSinceStart")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsClosed");

                    b.HasIndex("UpdateDate");

                    b.HasIndex("UserId");

                    b.HasIndex("VariantId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("api.Data.Entities.Auth.User", b =>
                {
                    b.HasOne("api.Data.Entities.ClimateDatas.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("api.Data.Entities.Catalog.Family", b =>
                {
                    b.HasOne("api.Data.Entities.Repositories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api.Data.Entities.Designation", "Designation", b1 =>
                        {
                            b1.Property<Guid>("FamilyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Image")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("ImageSource")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.HasKey("FamilyId");

                            b1.HasIndex("Name");

                            b1.ToTable("Families");

                            b1.WithOwner()
                                .HasForeignKey("FamilyId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Designation")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Data.Entities.Catalog.Search", b =>
                {
                    b.OwnsOne("api.Data.Entities.Designation", "SearchDesignation", b1 =>
                        {
                            b1.Property<Guid>("SearchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Image")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("ImageSource")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.HasKey("SearchId");

                            b1.HasIndex("Name");

                            b1.ToTable("Searches");

                            b1.WithOwner()
                                .HasForeignKey("SearchId");
                        });

                    b.Navigation("SearchDesignation")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Data.Entities.Catalog.Variant", b =>
                {
                    b.HasOne("api.Data.Entities.Catalog.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api.Data.Entities.Designation", "Designation", b1 =>
                        {
                            b1.Property<Guid>("VariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Image")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("ImageSource")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.HasKey("VariantId");

                            b1.HasIndex("Name");

                            b1.ToTable("Variants");

                            b1.WithOwner()
                                .HasForeignKey("VariantId");
                        });

                    b.OwnsOne("api.Data.Entities.Catalog.Sowing", "HarvestMonths", b1 =>
                        {
                            b1.Property<Guid>("VariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("April")
                                .HasColumnType("bit");

                            b1.Property<bool>("August")
                                .HasColumnType("bit");

                            b1.Property<bool>("December")
                                .HasColumnType("bit");

                            b1.Property<bool>("February")
                                .HasColumnType("bit");

                            b1.Property<bool>("January")
                                .HasColumnType("bit");

                            b1.Property<bool>("July")
                                .HasColumnType("bit");

                            b1.Property<bool>("June")
                                .HasColumnType("bit");

                            b1.Property<bool>("March")
                                .HasColumnType("bit");

                            b1.Property<bool>("May")
                                .HasColumnType("bit");

                            b1.Property<bool>("November")
                                .HasColumnType("bit");

                            b1.Property<bool>("October")
                                .HasColumnType("bit");

                            b1.Property<bool>("September")
                                .HasColumnType("bit");

                            b1.HasKey("VariantId");

                            b1.ToTable("Variants");

                            b1.WithOwner()
                                .HasForeignKey("VariantId");
                        });

                    b.OwnsOne("api.Data.Entities.Catalog.Sowing", "SowingMonths", b1 =>
                        {
                            b1.Property<Guid>("VariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("April")
                                .HasColumnType("bit");

                            b1.Property<bool>("August")
                                .HasColumnType("bit");

                            b1.Property<bool>("December")
                                .HasColumnType("bit");

                            b1.Property<bool>("February")
                                .HasColumnType("bit");

                            b1.Property<bool>("January")
                                .HasColumnType("bit");

                            b1.Property<bool>("July")
                                .HasColumnType("bit");

                            b1.Property<bool>("June")
                                .HasColumnType("bit");

                            b1.Property<bool>("March")
                                .HasColumnType("bit");

                            b1.Property<bool>("May")
                                .HasColumnType("bit");

                            b1.Property<bool>("November")
                                .HasColumnType("bit");

                            b1.Property<bool>("October")
                                .HasColumnType("bit");

                            b1.Property<bool>("September")
                                .HasColumnType("bit");

                            b1.HasKey("VariantId");

                            b1.ToTable("Variants");

                            b1.WithOwner()
                                .HasForeignKey("VariantId");
                        });

                    b.Navigation("Designation")
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("HarvestMonths")
                        .IsRequired();

                    b.Navigation("SowingMonths")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Data.Entities.ClimateDatas.PhysicalMeasurements", b =>
                {
                    b.HasOne("api.Data.Entities.ClimateDatas.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("api.Data.Entities.ClimateDatas.Station", b =>
                {
                    b.HasOne("api.Data.Entities.ClimateDatas.Climate", "Climate")
                        .WithMany()
                        .HasForeignKey("ClimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climate");
                });

            modelBuilder.Entity("api.Data.Entities.Messaging.Message", b =>
                {
                    b.HasOne("api.Data.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Data.Entities.Repositories.Stage", b =>
                {
                    b.HasOne("api.Data.Entities.Repositories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Data.Entities.StocksManaging.Package", b =>
                {
                    b.HasOne("api.Data.Entities.StocksManaging.Stock", null)
                        .WithMany("Packages")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("api.Data.Entities.StocksManaging.Stock", b =>
                {
                    b.HasOne("api.Data.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Data.Entities.Catalog.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("api.Data.Entities.Workflow.Event", b =>
                {
                    b.HasOne("api.Data.Entities.Workflow.Flow", "Flow")
                        .WithMany("Events")
                        .HasForeignKey("FlowId");

                    b.HasOne("api.Data.Entities.Repositories.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("api.Data.Entities.Workflow.Flow", b =>
                {
                    b.HasOne("api.Data.Entities.Repositories.Stage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Data.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Data.Entities.Catalog.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentStage");

                    b.Navigation("User");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("api.Data.Entities.StocksManaging.Stock", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("api.Data.Entities.Workflow.Flow", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
